{"ast":null,"code":"var _jsxFileName = \"/Users/mitpatel/Desktop/Kroger/test-latest/src/App.js\";\nimport React, { Component } from 'react';\nimport Layout from './components/layout/layout';\nimport Divistion from './components/divistions/divistion';\nimport Schedule from './components/schedules/schedule';\nimport DivistionAndBannerData from './assets/DivistionAndBanners.json';\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.toggleDivisionAndBanners = () => {\n      this.setState({\n        isDivisionAndBanner: !this.state.isDivisionAndBanner\n      });\n    };\n\n    this.toggleBanner = () => {\n      this.setState({\n        isBanner: !this.state.isBanner\n      });\n    };\n\n    this.toggleDivision = () => {\n      this.setState({\n        isDivision: !this.state.isDivision\n      });\n    };\n\n    this.selectedAll = (data, checked) => {\n      return data.map(item => {\n        let itemObj = item;\n        itemObj.states.map(state => {\n          let obj = state;\n          obj.checked = checked;\n          return obj;\n        });\n        return itemObj;\n      });\n    };\n\n    this.handeleSelectAll = e => {\n      const _this$state = this.state,\n            banners = _this$state.banners,\n            divisions = _this$state.divisions;\n      let checked = e.target.checked;\n      let bannerData = this.selectedAll(banners, checked);\n      let divisionsData = this.selectedAll(divisions, checked);\n      let checkedBannerLength = this.handleSelectedCount(bannerData);\n      let checkedDivisionLength = this.handleSelectedCount(divisionsData);\n      this.setState({\n        banners: [...bannerData],\n        divisions: [...divisionsData],\n        checkedBannerLength,\n        checkedDivisionLength\n      });\n    };\n\n    this.handleCheck = (name, state, event) => {\n      const _this$state2 = this.state,\n            banners = _this$state2.banners,\n            divisions = _this$state2.divisions;\n      const isChecked = event.target.checked;\n\n      if (name === 'banners') {\n        let bannerData = this.handleSelect(state, banners, isChecked);\n        let count = this.handleSelectedCount(bannerData);\n        this.setState({\n          banners: bannerData,\n          checkedBannerLength: count\n        });\n      } else {\n        let divisionsData = this.handleSelect(state, divisions, isChecked);\n        let count = this.handleSelectedCount(divisionsData);\n        this.setState({\n          divisions: divisionsData,\n          checkedDivisionLength: count\n        });\n      }\n    };\n\n    this.state = {\n      banners: [],\n      divisions: [],\n      isDivisionAndBanner: false,\n      isBanner: false,\n      isDivision: false,\n      checkedBannerLength: 0,\n      checkedDivisionLength: 0\n    };\n  }\n\n  componentDidMount() {\n    const banners = DivistionAndBannerData.banners,\n          divisions = DivistionAndBannerData.divisions;\n    this.setState({\n      banners,\n      divisions\n    });\n  }\n\n  handleSelect(obj, data, isChecked) {\n    return data.map(item => {\n      let itemObj = item;\n      itemObj.states.map(state => {\n        let stateobj = state;\n        stateobj.checked = stateobj.state === obj.state ? isChecked : stateobj.checked;\n        return stateobj;\n      });\n      return itemObj;\n    });\n  }\n\n  handleSelectedCount(data) {\n    let count = 0;\n    data.forEach(item => {\n      let checkedLength = item.states.filter(state => {\n        return state.checked;\n      }).length;\n      count += checkedLength;\n    });\n    return count;\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          banners = _this$state3.banners,\n          divisions = _this$state3.divisions,\n          isDivisionAndBanner = _this$state3.isDivisionAndBanner,\n          isBanner = _this$state3.isBanner,\n          isDivision = _this$state3.isDivision,\n          checkedBannerLength = _this$state3.checkedBannerLength,\n          checkedDivisionLength = _this$state3.checkedDivisionLength;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(Divistion, {\n      banners: banners,\n      divisions: divisions,\n      toggleDivisionAndBanners: this.toggleDivisionAndBanners,\n      toggleBanner: this.toggleBanner,\n      toggleDivision: this.toggleDivision,\n      isDivisionAndBanner: isDivisionAndBanner,\n      isBanner: isBanner,\n      isDivision: isDivision,\n      handeleSelectAll: this.handeleSelectAll,\n      handleCheck: this.handleCheck,\n      checkedBannerLength: checkedBannerLength,\n      checkedDivisionLength: checkedDivisionLength,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(Schedule, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mitpatel/Desktop/Kroger/test-latest/src/App.js"],"names":["React","Component","Layout","Divistion","Schedule","DivistionAndBannerData","App","constructor","toggleDivisionAndBanners","setState","isDivisionAndBanner","state","toggleBanner","isBanner","toggleDivision","isDivision","selectedAll","data","checked","map","item","itemObj","states","obj","handeleSelectAll","e","banners","divisions","target","bannerData","divisionsData","checkedBannerLength","handleSelectedCount","checkedDivisionLength","handleCheck","name","event","isChecked","handleSelect","count","componentDidMount","stateobj","forEach","checkedLength","filter","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from './components/layout/layout';\nimport Divistion from './components/divistions/divistion';\nimport Schedule from './components/schedules/schedule';\nimport DivistionAndBannerData from './assets/DivistionAndBanners.json';\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      banners: [],\n      divisions: [],\n      isDivisionAndBanner: false,\n      isBanner: false,\n      isDivision: false,\n      checkedBannerLength: 0,\n      checkedDivisionLength: 0,\n\n    }\n  }\n  componentDidMount() {\n    const { banners, divisions } = DivistionAndBannerData;\n    this.setState({\n      banners,\n      divisions\n    })\n  }\n  toggleDivisionAndBanners = () => {\n    this.setState({\n      isDivisionAndBanner: !this.state.isDivisionAndBanner\n    })\n  }\n  toggleBanner = () => {\n    this.setState({\n      isBanner: !this.state.isBanner\n    })\n  }\n  toggleDivision = () => {\n    this.setState({\n      isDivision: !this.state.isDivision\n    })\n  }\n  selectedAll = (data, checked) => {\n    return data.map((item) => {\n      let itemObj = item\n      itemObj.states.map((state) => {\n        let obj = state;\n        obj.checked = checked;\n        return obj;\n      })\n      return itemObj;\n    })\n  }\n  handeleSelectAll = (e) => {\n    const { banners, divisions } = this.state;\n    let checked = e.target.checked;\n    let bannerData = this.selectedAll(banners, checked);\n    let divisionsData = this.selectedAll(divisions, checked);\n    let checkedBannerLength = this.handleSelectedCount(bannerData);\n    let checkedDivisionLength = this.handleSelectedCount(divisionsData);\n    this.setState({\n      banners: [...bannerData],\n      divisions: [...divisionsData],\n      checkedBannerLength,\n      checkedDivisionLength\n    })\n  }\n  handleSelect(obj, data, isChecked) {\n    return data.map((item) => {\n      let itemObj = item;\n      itemObj.states.map((state) => {\n        let stateobj = state;\n        stateobj.checked = stateobj.state === obj.state ? isChecked : stateobj.checked\n        return stateobj\n      })\n      return itemObj;\n    })\n  }\n  handleSelectedCount(data) {\n    let count = 0;\n    data.forEach((item) => {\n      let checkedLength = item.states.filter((state) => {\n        return state.checked;\n      }).length;\n      count += checkedLength;\n    })\n    return count;\n  }\n  handleCheck = (name, state, event) => {\n    const { banners, divisions } = this.state;\n    const isChecked = event.target.checked;\n    if (name === 'banners') {\n      let bannerData = this.handleSelect(state, banners, isChecked);\n      let count = this.handleSelectedCount(bannerData);\n      this.setState({ banners: bannerData, checkedBannerLength: count })\n    } else {\n      let divisionsData = this.handleSelect(state, divisions, isChecked);\n      let count = this.handleSelectedCount(divisionsData);\n      this.setState({ divisions: divisionsData, checkedDivisionLength: count })\n    }\n  }\n  render() {\n    const {\n      banners,\n      divisions,\n      isDivisionAndBanner,\n      isBanner,\n      isDivision,\n      checkedBannerLength,\n      checkedDivisionLength \n    } = this.state;\n    return (\n      <div className=\"App\">\n        <Layout />\n        <Divistion banners={banners}\n          divisions={divisions}\n          toggleDivisionAndBanners={this.toggleDivisionAndBanners}\n          toggleBanner={this.toggleBanner}\n          toggleDivision={this.toggleDivision}\n          isDivisionAndBanner={isDivisionAndBanner}\n          isBanner={isBanner}\n          isDivision={isDivision}\n          handeleSelectAll={this.handeleSelectAll}\n          handleCheck={this.handleCheck}\n          checkedBannerLength={checkedBannerLength}\n          checkedDivisionLength={checkedDivisionLength}\n        />\n        <Schedule />\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}